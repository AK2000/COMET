# RUN: comet-opt --convert-ta-to-it --convert-to-loops %s &> eltwise_add_DensexCSF_oDense.mlir
# RUN: mlir-opt --convert-scf-to-std --convert-std-to-llvm eltwise_add_DensexCSF_oDense.mlir &> eltwise_add_DensexCSF_oDense.llvm
# RUN: export SPARSE_FILE_NAME0=%comet_integration_test_data_dir/test_rank3.tns
# RUN: mlir-cpu-runner eltwise_add_DensexCSF_oDense.llvm -O3 -e main -entry-point-result=void -shared-libs=%mlir_utility_library_dir/libmlir_runner_utils%shlibext,%comet_utility_library_dir/libcomet_runner_utils%shlibext | FileCheck %s

def main() {
	#IndexLabel Declarations
	IndexLabel [i] = [?];
	IndexLabel [j] = [?];            
	IndexLabel [k] = [?];            

	#Tensor Declarations	  
	Tensor<double> B([i, j, k], {CSF});
	Tensor<double> A([i, j, k], {Dense});	
	Tensor<double> C([i, j, k], {Dense});

    #Tensor Readfile Operation
    B[i, j, k] = comet_read(0);

	#Tensor Fill Operation
	A[i, j, k] = 2.7;

	#Initialize output dense tensor
	C[i, j, k] = 0.0;

	print(B);

	#Tensor Contraction
	C[i, j, k] = A[i, j, k] + B[i, j, k];
	
	print(C);
}

# Print the result for verification.